
																		COLLECTIONS
																	==================
																	
//An array is an indexded collection of fixed no of homogenous element 
//The main advantage is we can represent multiple value using single variable so that readability of the code will improve .
//Limitation of arrays :
	//Arrays are fixed in size i.e, once we create an array there is no chance of increasing or decreasing based on our requirement due to this array concept compulsory we should no the size in advance which may not possible always.
	//Array can hold only homogenous datatype elements. e.g.
	//	Student[] s = new Student[10000];
	//	s[0] = new Student();
	//	s[1] = new Customer();
		//CE: incompatible tpes 
		//found: customer
		//required: Student
	//We can solve this prolem by using object type array.
	//Object [] a = new Object[10000];
	//a[0] = new Student();//these are valid
	//a[1] = new Customer();//this is also

//Ararys concept not implemented based on some standard datastructres and hence ready made method support is not available .For every requirement we have to write the code explicitly which increase the complexity.


To Overcome above prolem of arrays we should go for collection concept.
	
	- Collection are growable in nature i.e, based on our requirement we can increase or decrease the size
	- Collection can hold both homogenous and heterogenous objects
	- Every collection class is implemented based on some standard datastructres Hence for every requirement readymade support readily available 
		being a programmmer we are responsible to use those method and we are not responsible to implement those method.
		
Differncese between arrays and collections
	Arrays 																		 collection
------------------------------------------------------------------------------------------------------------------------------------

-Arrays are fixed in size i.e, once 					-collection are growable in nature i.e,
	we create an array we can't increase					based on our requirement we can increase or decrease the size
	or decrease the size based on our
	requirement.
	
-wrt memory arrays are not recommended to use			-wrt memory collection are recommended to use
-wrt to performance arrays are recommended to			-wrt to performance collection are not recommended to use
	use
-Arrays can hold only homogenous type of elemtn			- collection can hold both homogenous and heterogenous elements
-there is no underlying datastructres for				-Every collection class is implemented based on some standard datastructres hence for every reqirement readymade support is readily available
arrays and hence readymade method support					being a programmer we are not responsible to implement those method
is not available.for every requirement we
have to write the code explicitly which 
increaes complexity of the programming.

-Arrays can hold both primitive and objects				-Collections can hold only objects type but not primitives.


COLLECTION :
		if we want to represent a group of individual object as single entity then we should go for collection
		
		COLLECTION FRAMWORK :
			- It contains several classes and interfaces we can used to represent a group of individual object as single entity.
			
	JAVA													C++
-collection											Container
-collection Framwrok								STL(standard template library)


9 key interfaces of collection framework
=========================================

	-1. Collection
	-2. List
	-3. set
	-4. sortedSet
	-5. NavigableSet
	-6. Queue
	-7. Map
	-8. SortedMap
	-9. NavigableMap


									COLLECTION(interface):
									======================

-If we want to represent a group of individual object as a single entity then we should go collection
-Collection interface defines the most common method which are applicable for any collection object.
- In general collection interface is considered as root interface of collection framework.
-There is no concrete class which implements collection interface directly.

Difference between collection(I) and collections(C)
	Collection is an interface . IF we want to represent a group of object as a single entity then we should go for collection
	Collections is an utility class present in java.util package to define several utility methods for collection object lilke sorting searching e.t.c.
	
	List(I) : It is the child interface of collection if we want to represent a group of individual objects as single entity where duplicates are allowed and insertion order must be preserved then we should go for list.
											Collection(I)(1.2v)
													|
													|
												List(I)(1.2v)
											/  		|  		 \
										   /   		|		  \
									ArrayList	Linkedlist		vector(1.0v)}
									(1.2v)			(1.2v)			|		 >legacy classes
																Stack(1.0v) }
																
Note: In 1.2v vector and stack classes are Re-engineered or modified to implement list interface.

	Set(I) : It is the child interface of collection 
		If we want to represent a group of individual objects as a single entity where duplicates are not allowed and insertion order not required then we should go set interface

								Collection(I)
									 (1.2v)
										|
									set(I)(1.2v)
										|
									HashSet(1.2v)
										|
								LinkedHashSet(1.4v)


	SortedSet(I) : It is the child interface of set
		If we want to represent a group of individual object as single entity where duplicates are not allowed and objects should be inserted according to some sorting order then we should sorted set.
		
	NavigableSet(I)(1.6v): it is the child interface of sortedset 
		it contains several method for navigable purposes.
		
													Collection(I)
															|
															|
														set(I)1.2v
															|
															|
														sortedset(I)1.2v
															|
															|
														NavigableSet(I)1.6v
															|
															|
														TreeSet(1.2v)




	It is child interface of collection.
	If we want to represent a group of individual objects prior to processing then we should go queue.
	usually queue follows first follows first in first out order but based on our requirement we can implement our own priorrity order also.
	e.g.: before sending a mail all mail id's we have to store in some datastructure 
		in which order we added mail id's in the same order only mail should be delivered for this reqirement queue is best choice.

Differences between list and set

			List													set
>Duplicates are allowed								>Duplicates are not allowed
>Insertion order preserved							>Insertion order not preserved


		6. Queue(I)


																		Collection
																				|
																				|
																			Queue
																 /------------	|-------\
																/				|		 \
													priorityQueue						BlockingQueue
																								|
																							___	|___
																		PriorityBlockingQueue		LinkedBlockingQueue

NOTE: All the above interfaces (collection,list,set,sortedset,navigableset and queue)

If we want to represent a group of object as key value pairs then we should go for map.

7.Map(I)
	map is not child interface of  collection.
	If we want to represent a group of objects as key value pairs then we should go for map.
	e.g. s.No 	|		Name
		101		|		durga
		102		|		ravi
		103		|		shiva
	>Both key and value are objects only
	>Duplicates keys are not allowed but values can be dublicated.
																	Map(I)										Dictionary(1.0v)
													 /	-------------|--------------------|---------------------\ |
													/			WeakHashMap(1.2v)  	IdentityHashMap(1.4v)		 \|
												HashMap	(1.2v)												Hashtable(1.0v)
													|															|
											LinkedHashMap(1.4v)												Properties(1.0v)

8.	SortedMap(I)	: It is the child interface of map
					If we want to represent a group of key value pairs according to some sorting order of keys then we should go for sorted map.
					In sorted Map the sorting should be based on key but not based on value

9.NavigableMap(I) : It is the child interface of sorted map.
						It defines several methods for navigation purposes.
																		map(I)(1.2v)
																			|
																			|
																		sortedMap(I)(1.2v)
																			|
																			|
																		NavigableMap(I)(1.6v)
																			|
																			|
																		TreeMap(1.2v)
																		
							The follwing are legacy characters present in collection framework :
									>Enumeration(I)
									>Dictionary(AC)
									>Vector(C)
									>Stack(C)
									>Hashtable(C)
									>Properties(C)
									
	Collection(I) : If we want to represent a group of individual objects as a single entity then we should go for collection.
			collection interface defines the most common mehtod which are applicable for any collection object.
			
		boolean add(Object o)
		boolean addAll(Collection c)
		boolean remove(Object o)
		boolean removeAll(Collection c)
		boolean retainAll(Collection c)
			To remove all objects except those present in can
		void clear()
		boolean contains(Object o)
		boolean containsAll(Object o)
		boolean isEmpty()
		int size();
		Object[] to Array();
		Iterator iterator()
		
		Note: There is no concrete class which implements collection interface directly.
		
	List(I) : 

			List is child interface of collection .
			If we want to represent a group of individual objects as a single entity where,
			duplicates are allowed and insertion order must be preserved.
			Then we should go for List.
			
			we can preserved insertion order via index. and we can differentiate duplicate object by using index Hence index will play very important role in list.
			
			List interface returns the following specific methods :
				void add(int index, Object o)
				boolean addAll(int index, Collection c)
				Object get(int index)
				Object remove(int index)
				
				Object set(int index, Object new)
					to replace the element present at specified index with provided Object and returns old object
				
				int indexOf(Object o)
					returns index of first occurence of 'o'
					
				int lastIndexof(Object o)
				
				ListIterator listIterator();
				
															Collection(I)
																 |
								------------------------------------------------------------------
								|								 |								 |
							ArrayList						Linkedlist							vector
																									|
																								Stack
																								
																								
		ArrayList :
				The underlying datastructure is resizable array or growable array
				Duplicates are allowed.
				Insertion order is preserved.
				Heterogenous objects are allowed.(except treeset and treemap everywhere heterogenous objects are allowed)
				NUll insertion is possible.
				
			Constructor 1:
							ArrayList l = new ArrayList();
							creates an empty arraylist object with default initial capacity 10.
							Once ArrayList reaches its max capacity then a new ArrayList object will be created with 
								------------------------------------------
							   | new capacity = (current capacity * 3/2)+1 |
								------------------------------------------
								
			Constructor 2:
							ArrayList l = new ArrayList(int intialcapacity);
							creates an empty arraylist object with specified intial capacity
						
			Constructor 3:
							ArrayList l = new ArrayList(Collection c);
							creates an equivalent arraylist object for the given collection.
							
/*
	import java.util.*;
	class ArrayListDemo{
		public static void main(String[] args){
		ArrayList l = new ArrayList();
		l.add("A");
		l.add(10);
		l.add("A");
		l.add(null);
		System.out.println(l);//[A,10,A,null]
		l.remove(2);
		System.out.println(l);//[A,10,null]
		l.add(2,"M");
		l.add("N");
		System.out.println(l);//[A,10,M,null,N]
	  }
	}
*/	

	Usually we can use collections to hold and transfer objects from one location(container) to provide support to this environment every collection class by default implements serializable and cloneable interface.
	
	ArrayList and vector classes implements RandomAccess interface so that any random element we can access with the same speed.
	
RandomAccess(I) : It present in java.util package and it doesn't contain any methods it is a marker interface where required ability will be provided automatically by the jvm.

	/*
		eg.
		ArrayList l1 = new ArrayList();
		LinkedList l2 = new LinkedList();
		System.out.println(l1 instanceof Serializable);//true
		System.out.println(l2 instanceof Cloneable);//true
		System.out.println(l1 instanceof RandomAccess);//true
		System.out.println(l2 instanceof RandomAccess);//true
		
		
	*/
	ArrayList is the best choice if our frequent operation is retrieval operation(because ArrayList implements RandomAccess interface)
	ArrayList is the worst choice if our frequent operation is insertion or deletion in the middle.
	
=/Differences between ArrayList and Vector 

			ArrayList 										|		Vector
>Every method present in ArrayList is Non-synchronized		|			>Every mehtod in vector is synchronized				
>at a time mutilple threads are allowed to operate all		|	>At a time only one thread is allowed to opreate on vector object 
ArrayList object and hence it is not thread safe.			|		and hence it is thread safe.
>Relatively performance is high because threads are not		|	> Relatively performance is low because threads are required to wait to operate on vector objects
required to wait operate on arraylist object.				|
>Introduce in 1.2v and it is non-legacy						|	>Introduce in 1.0v and it is legacy.

How to get synchronized version of ArrayList Object?
	> By default ArrayList is non-synchronized but we can get synchronized version of ArrayList objectby using synchronizedList() method of Collections class.
	
		public static List synchronizedList(List l)
		
	e.g.: ArrayList l = new ArrayList();
		List l1 = Collections.synchronizedList(l);
			  |								   |
			synchronized				Non-synchronized
			
	similarly we can get synchronized version of set and map objects by using the following methods of Collecitons class
		public static Set synchronizedSet(Set s)
		public static Map synchronizedMap(Map m)
		
LinkedList:
		>The Underlying datastructre is DoubleLinkedList
		>Insertion order is preserved.
		>Duplicates objects are allowed.
		>Heterogenous objects are allowed.
		>Null insertion is possible.
		>LinkedList implements serializable and cloneable interfaces but not randomAccess
		>LinkedList is best choice if our frequent operation is insertion or deletion in the middle.
		>It is the worst choice if our frequent operation is retrieval operation
		
	Constructors :
					LinkedList l = new LinkedList();
					creates an empty linked list object
					LinkedList l = new LinkedList(Collection c);
					creates an equivalent linkedlist object for the given collection
					
					LinkedList class specific methods :
						Usually we can use LinkedList to devlop stacks and queue to provide support for this requirement LinkedList class defines the following specific methods :-
							void addFirst(Object o)
							void addLast(Object o)
							Object getFirst()
							object getLast()
							Object removeFirst()
							Object removeLast()
							
/*
	import java.util.*;
	class LinkedListDemo{
		public static void main(String[] args){
			LinkedList l = new LinkedList();
			l.add("durga");
			l.add(30);
			l.add(null);
			l.add("durga");
			l.set(0,"Software");//[durga,30,null,durga]
			l.add(0,"venky");//[venky,Software,30,null,durga]
			l.removeLast();//[venky,Software,30,null]
			l.addFirst("CCC");//[CCC,venky,Software,30,null]
			System.out.println(l);//[CCC,venky,Software,30,null]
		}
	}
*/	

		Difference between	ArrayList and LinkedList
		
		ArrayList								LinkedList
>It is the best choice if our frequent operation is			>it is the best choice if our frequent operation is
retrieval operation.										insertion or deletion in the middle.
>ArrayList is the worst choice if our frequent operation	>LinkedList is the worst choice if our frequent operation is 
is insertion or deletion in middle because internally		retrieval operation.
several shift operation are performed.
		
>In arraylist the element will be stored in consecutive		>In linkedlist element won't be stored in consecutive memory location
memory location and hence retrieval opreration will be			and hence retrieval operation will become complex.
easy
		
		
Vector : The underlying datastructer is resizable array or growable array.
		Insertion order is preserved.
		Duplicates are allowed.
		Heterogenous objects are allowed.
		Null insertion is possible.
		It implements serializable, cloneable and RandomAccess interface.
		Every method present in the vector is synchronized and hence vector object is thread safe.
		
		Constructors : 
						Vector v = new Vector();
						creates an empty vector object with default intial capacity 10.
						Once vector reaches its max capacity then a new vector object will be created with
						new capacity = current capacity * 2;
						
						Vector v = new Vector(int intialcapacity);
						creates an empty vector object with specified intial capacity.
						
						Vector v = new Vector(int intialcapacity, int incrementalcapacity);
						
						Vector v = new Vector(Collection c);
		
		Vector specific methods :
						To add objects
								add(Object o)--C
								add(int index, Object o)---L
								addElement(Object o)--V
						
						To remove objects 
								remove(object o)-----c
								removeElement(object o)-----V
								remove(int index)------L
								removeElementAt(int index)-----V
								clear()-----CCC
								removeAllElements()-----V
								
						To get objects
								Object get(int index)----L
								Object elementAt(int index)----V
								Object firstElement()----V
								Object lastElement()----V
								
			Other methods :
						int size()
						int capacity()
						Enumeration elements()
						
/*
	import java.util.*;
	class VectorDemo1{
		public static void main(String[] args){
			Vector v = new Vector();
			System.out.println(v.capacity());//10
			for(int i=1; i<=10; i++){
				v.addElement(i);
			}
			System.out.println(v.capacity());//10
			v.addElement("A");
			System.out.println(v.capacity());//20
			System.out.println(v);//[1,2,,,,10,A]
		}
	}
			
*/


Stack : 
		It is the child class of vector .
		It is a specially designed class for Last in First out order(LIFO).
		
		Constructor :
						Stack s = new Stack();
						
		Methods :	
					Object push(Object o)
						to insert an object into the stack
					Object pop()
						to remove and reutrn top of the stack
					Object peek()
						to return top of the stack without removal
					boolean empty()
						returns true if the stack is empty
					int search(Object o)
						returns offset if the element is available otherwise return -1.
						
						
/*
	import java.util.*;
	class StackDemo{
		public static void main(String[] args){
			Stack s = new Stack();
			s.push("A");
			s.push("B");
			s.push("C");
			System.out.println(s);//[A,B,C]
			System.out.println(s.search("A"));//3
			System.out.println(s.search("Z"));//-1
			
		}
	}
*/	

							stack
						-----------------
		offset :		1|		C		|2	: index
						2|		B		|1
						3|		A		|0
						 |				|
						-----------------
						
If we want to get object one by one from the collection then we should go for cursor.
There are three types of cursor available in java.
	1.Enumeration
	2.Iterator
	3.ListIterator
	
	
Enumeration : We can use enumeration to get objects one by one from legacy collection object.
				
				WE can create enumeration object by using elements method of vector class.
					public Enumeration elements();
					
					eg. Enumeration e = v.elements();
					
					
				Methods :
							public boolean hasMoreElements();
							public Object nextElement();
	
	
/*
	import java.util.*;
	class EnumerationDemo{
		public static void main(String[] args){
			Vector v = new Vector();
			for(int i = 0; i<=10; i++){
				v.addElement(i);
			}
			System.out.println(v);//[0,1,2,3,....,10]
			Enumeration e = v.elements();
			while(e.hasMoreElements()){
				Integer I = (Integer)e.nextElement();
				if(I%2==0){
					System.out.println(I);//0 2 4 6 8 10
				}
				System.out.println(v);//[0,1,2,3,....,10]
			}
		}
	}
*/

Limitations of Enumeration :
	1. We can apply enumeration concept only for legacy classes and it is not a universal cursor.
	2. By using enumeration we can get only read access and we can't perform remove operation .
		To overcome above limitations we should go for Iterator
		
ITERATOR (I)(1.2v):
			1. we can apply iterator concept for any collection object and hence it is universal cursor.
			2. by using iterator we can perform both read and remove operations.
				Eg: we can create Iterator object by using iterator method of Collection interface.
					public Iterator iterator();
					
					eg : Iterator itr = c.iterator();
				
			Methods :
						public boolean hasNext();
						public Object next();
						public void remove();
						
/*
	import java.util.*;
	class IteratorDemo{
		public static void main(String[] args){
			ArrayList l = new ArrayList();
			for(int i=0; i<=10; i++){
				l.add(i);
			}
			System.out.println(l);//[0,1,2,...10]
			Iterator itr = l.hasNext();
			while(itr.hasNext()){
				Integer I = (Integer)itr.next();
				if(I%2==0)
					System.out.println(I);//0 2 4 6 8 10
				else
					itr.remove();
			}
			System.out.println(l);//[0,2,4,6,8,10]
		}
	}
*/

Limitation of Iterator :
		1. By using enumeration and Iterator we can always move only towards foward direction and we can't move towards backward direction these are single direction cursors but not 
			bidirectional cursor.
		2. By using Iterator we can perform only read and remove operations and we can't perform replacement and addition of new objects.
			To Overcome above limitations we should go for listIterator.
			
			
			
LISTITERATOR(I) :
				1. By using ListIterator we can move either to the forward direction or to the backward direction. and hence it is bidirectional cursor.
				2. By using ListIterator we can perform replacement and addition of new objects in addition to read and remove operations.
			
			We can create ListIterator by using listIterator() method of List interface.
				public ListIterator listIterator();
				
					eg. : ListIterator ltr = l.listIterator();
							where l is any list object.
							
					ListIterator is the child iterface of Iterator. and hence all methods present in iterator by default available to the ListIterator.
																
																Iterator(I)
																	|
																	|
																	|
																ListIterator(I)
																
																
		ListIterator defines the following 9 methods :
					forward movement:
				1. public boolean hasNext();
				2. public Object next();
				3. public int nextIndex();
				
					Backward movement
				4.public boolean hasPrevious();
				5.public Object previous();
				6.public int previousIndex();
				
						extra operations.
				7.public void remove()
				8.public void add(Object o)
				9.public void set(Object o)
				
				
/*
	137:50 example
*/
						
						