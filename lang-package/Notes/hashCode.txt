//hashCode
//For every object a unique no is generated by jvm which is nothing but hashCode.
//hashCode won't represent address of object
//jvm will use hashCode while saving object into hashing related datastructures like hashtable , hashmap, hashset etc.
//The main advantage of saving objects based on hashCode is search operation will become easy(the most powerful search algo upto today is "hashing")
//if you giving a chance to object class hashCode method it will generate hashcode based on address of the object it doesn't mean hashcode represents address of the object.
//based on our requirement we can override hashcode method in our class to generate our own hashcode 
//overriding hashcode method is said to be proper if and only if for object we have to generate a unique no as hashcode.
// public native int hashCode();

/*
	class Student{
		public int hashCode(){
			return 100;//this is improper way of overriding hashcode method because for all student object we are generating same as hashcode.
		}
	}
	============================
	class Student{
		public int hashCode(){
			return rollno;//this is proper way of overriding hashcod method becasue we are generating a different hashcode for every object.
		}
*/

/*    toString vs hashCode

	if we are giving a chance to object class toString method it will internally calls hashCode method
	if we are overriding toString method our toString method may not call hashCode method.
*/

/*
//here it will call toString() and hashCode() from Object class
	class Test{
		int i;
		Test(int i){
			this.i = i;
		}
		public static void main(String[] args){
			Test t1 = new Test(10);
			Test t2 = new Test(100);
			System.out.println(t1);//Test@abcd
			System.out.println(t2);//Test@lkjf
		}
	}
	====================================================
//here it will call toString() method form Object class and hashCode() from Test class
	class Test{
		int i;
		Test(int i){
			this.i = i;
		}
		public int hashCode(){
			return i;
		}
		public static void main(String[] args){
			Test t1 = new Test(10);
			Test t2 = new Test(100);
			System.out.println(t1);//Test@a
			System.out.println(t2);//Test@64
		}
	}
	=====================================================
//here it will call toString() and hashCode() from Test class itself only 
	class Test{
		int i;
		Test(int i){
			this.i = i;
		}
		public String toString(){
			return i+" ";
		}
		public int hashcode(){
			return i;
		}
		public static void main(String[] args){
			Test t1 = new Test(10);
			Test t2 = new Test(100);
			System.out.println(t1);//10
			System.out.println(t2);//100
		}
		
	}